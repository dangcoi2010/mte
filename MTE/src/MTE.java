
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.*;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.WindowConstants;
import javax.swing.undo.UndoManager;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Windows 10 Version 2
 */
public class MTE extends javax.swing.JFrame {

    private File f = null;
    private String currentContext = "";
    UndoManager editManager = new UndoManager();

    public MTE() {
        initComponents();
        this.setTitle("Untitled - Notepad");
        try {
            this.setIconImage(ImageIO.read(new File("icon.png")));
        } catch (IOException e) {
        }
        txtA.getDocument().addUndoableEditListener(editManager);

        redoStack = new Stack();
        undoStack = new Stack();
        currentText = "";
        nextText = "";
    }

    public String getTxtA() {
        return (txtA.getText());
    }

    public void setTxtA(String x) {
        txtA.setText(x);
    }

    public int getSelectionEnd() {
        return txtA.getSelectionEnd();
    }

    public int getSelectionStart() {
        return txtA.getSelectionStart();
    }

    public void setCaretPos(int a) {
        txtA.setCaretPosition(a);
    }

    public void moveCaretPos(int a) {
        txtA.moveCaretPosition(a);
    }

    public void setSelectionVisible(boolean a) {
        txtA.getCaret().setSelectionVisible(a);
    }

    public Font getCurrentFont() {
        Font font = txtA.getFont();
        return font;
    }

    public void setSelectedFont(Font f) {
        txtA.setFont(f);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtA = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        fileNew = new javax.swing.JMenuItem();
        fileOpen = new javax.swing.JMenuItem();
        fileSave = new javax.swing.JMenuItem();
        fileSaveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        fileExit = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        editUndo = new javax.swing.JMenuItem();
        editRedo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        editCut = new javax.swing.JMenuItem();
        editCopy = new javax.swing.JMenuItem();
        editPaste = new javax.swing.JMenuItem();
        editDel = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        editFind = new javax.swing.JMenuItem();
        editReplace = new javax.swing.JMenuItem();
        editSelectAll = new javax.swing.JMenuItem();
        editFont = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtA.setColumns(20);
        txtA.setLineWrap(true);
        txtA.setRows(5);
        txtA.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtACaretUpdate(evt);
            }
        });
        txtA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(txtA);

        jMenu1.setText("File");

        fileNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        fileNew.setText("New");
        fileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNewActionPerformed(evt);
            }
        });
        jMenu1.add(fileNew);

        fileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileOpen.setText("Open...");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        jMenu1.add(fileOpen);

        fileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSave.setText("Save");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        jMenu1.add(fileSave);

        fileSaveAs.setText("Save As...");
        fileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(fileSaveAs);
        jMenu1.add(jSeparator2);

        fileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        fileExit.setText("Exit");
        fileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExitActionPerformed(evt);
            }
        });
        jMenu1.add(fileExit);

        jMenuBar1.add(jMenu1);

        edit.setText("Edit");

        editUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        editUndo.setText("Undo");
        editUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUndoActionPerformed(evt);
            }
        });
        edit.add(editUndo);

        editRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        editRedo.setText("Redo");
        editRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRedoActionPerformed(evt);
            }
        });
        edit.add(editRedo);
        edit.add(jSeparator3);

        editCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        editCut.setText("Cut");
        editCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCutActionPerformed(evt);
            }
        });
        edit.add(editCut);

        editCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        editCopy.setText("Copy");
        editCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCopyActionPerformed(evt);
            }
        });
        edit.add(editCopy);

        editPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        editPaste.setText("Paste");
        editPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPasteActionPerformed(evt);
            }
        });
        edit.add(editPaste);

        editDel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        editDel.setText("Delete");
        editDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDelActionPerformed(evt);
            }
        });
        edit.add(editDel);
        edit.add(jSeparator4);

        editFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        editFind.setText("Find");
        editFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFindActionPerformed(evt);
            }
        });
        edit.add(editFind);

        editReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        editReplace.setText("Replace");
        editReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editReplaceActionPerformed(evt);
            }
        });
        edit.add(editReplace);

        editSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        editSelectAll.setText("Select All Text");
        editSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSelectAllActionPerformed(evt);
            }
        });
        edit.add(editSelectAll);

        editFont.setText("Change Font...");
        editFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFontActionPerformed(evt);
            }
        });
        edit.add(editFont);

        jMenuBar1.add(edit);

        jMenu2.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //FUNCTION: READ FILE AFTER OPENED
    private void readFile() {
        BufferedReader br = null;
        String content = "";
        try {
            br = new BufferedReader(new FileReader(f));
            String line = "";
            while ((line = br.readLine()) != null) {
                content += line;
                content += "\n";
            }
            if (!content.equals("")) {
                String substring = content.substring(0, content.length() - 1);
                txtA.setText(substring);
            }
            br.close();
        } catch (FileNotFoundException e) {
        } catch (IOException ex) {
            Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    //FUNCTION: Choose File
    private JFileChooser chooseFile() {
        JFileChooser chooser;
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        if (f != null) {
            chooser.setCurrentDirectory(f);
            System.out.println(f);
        }
        return chooser;
    }

    //FUNCTION: WRITE TO FILE
    private void writeFile(File filename) {
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(filename));
            txtA.write(bw);
            currentContext = txtA.getText();
        } catch (IOException e) {
        } finally {
            try {
                if (bw != null) {
                    bw.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    //FUNCTION: OPEN FILE
    private void openFile() {
        JFileChooser chooser = chooseFile();
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            clear();
            f = chooser.getSelectedFile();
            readFile();
            this.setTitle(chooser.getSelectedFile().getName() + " - Notepad");
            currentContext = txtA.getText();
        }
    }

//FUNCTION: SAVE NEW FILE
    private void save() {
        //If no any file opened before
        if (f == null) {
            //if the content is edited then save as a file
            if (!txtA.getText().equals("")) {
                saveAs();
            }
        } else {  //if file have been opened before, write new content to that file
            writeFile(f);
        }
    }

    //FUNCTION: SAVE AS NEW FILE
    private void saveAs() {
        int retval = -1;
        JFileChooser chooser = chooseFile();
        while (true) {
            retval = chooser.showSaveDialog(this);
            f = chooser.getSelectedFile();
            if (retval == JFileChooser.APPROVE_OPTION) {
                //check duplicated file
                File checkFile = new File(f.getPath());  //get the file
                if (f.exists()) {
                    int result = JOptionPane.showConfirmDialog(null,
                            checkFile.getName() + " already exists\n Do you want to replace it?",
                            "Confirm save as", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (result == JOptionPane.YES_OPTION) {
                        writeFile(f);
                        this.setTitle(f.getName() + " - Notepad");
                        break;
                    }
                } else {
                    writeFile(f);
                    this.setTitle(f.getName() + " - Notepad");
                    break;
                }

            } else {
                break;
            }
        }
    }

    //FUNCTION: 
    private void newFile() {
        //CHECK EMPTY TEXT
        if (!txtA.getText().equals("")) { // IF THE TEXT EDITOR IS NOT EMPTY
            //CHECK CONTENT
            if (isModified()) {  // IF THE TEXT EDITOR IS MODIFIED
                Object[] options = {"Save", "Don't Save", "Cancel"};
                int confirm = JOptionPane.showOptionDialog(rootPane, "Do you want to save changes?",
                        "MTE", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                        null, options, options[2]);
                switch (confirm) {
                    case JOptionPane.NO_OPTION: //if press dont save
                        clear();
                        break;
                    case JOptionPane.YES_OPTION: //if press save
                        if (f == null) {
                            save();
                        } else {
                            writeFile(f);
                            clear();
                        }
                }
            } else { // IF THE content IS not MODIFIED
                clear();
            }
        } else {
            clear();
        }
    }

    //FUNCTION: Exit
    private boolean isExit() {
        if (!isModified()) {
            return true;
        } else {
            int confirm = JOptionPane.showConfirmDialog(rootPane, "Do you want to save changes?",
                    "MTE", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            switch (confirm) {
                case JOptionPane.NO_OPTION:
                    return true;
                case JOptionPane.YES_OPTION:
                    if (f == null) {
                        save();
                        return true;
                    } else {
                        writeFile(f);
                        return true;
                    }
                case JOptionPane.CANCEL_OPTION:
                    return false;
            }
            return false;
        }
    }

    //FUNCTION: CREATE AN EMPTY TEXT AREA
    private void clear() {

        this.setTitle("Untitled - Notepad");
        txtA.setText("");
        f = null;
        currentContext = "";

    }

    //FUNCTION: UNDO and REDO
    private void undo() {
        if (editManager.canUndo()) {
            editManager.undo();
        }
    }

    private void redo() {
        if (editManager.canRedo()) {
            editManager.redo();
        }
    }

    private boolean isModified() {
        String newContext = txtA.getText();
        return !newContext.equals(currentContext);
    }

    private void dang() {
        try {
            String data = (String) Toolkit.getDefaultToolkit()
                    .getSystemClipboard().getData(DataFlavor.stringFlavor);
            if (data.equals("") || data == null) {
                editPaste.setEnabled(false);
            } else {
                editPaste.setEnabled(true);
            }
        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (txtA.getSelectedText() == null) {
            editCopy.setEnabled(false);
            editCut.setEnabled(false);
            editDel.setEnabled(false);
        } else {
            editCopy.setEnabled(true);
            editCut.setEnabled(true);
            editDel.setEnabled(true);

        }
        editUndo.setEnabled(true);
        editRedo.setEnabled(true);
        if (!editManager.canUndo()) {
            editUndo.setEnabled(false);
        }
        if (!editManager.canRedo()) {
            editRedo.setEnabled(false);
        }
    }

    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed
        openFile();
    }//GEN-LAST:event_fileOpenActionPerformed

    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        save();
    }//GEN-LAST:event_fileSaveActionPerformed

    private void fileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNewActionPerformed
        newFile();
        editManager.discardAllEdits();
    }//GEN-LAST:event_fileNewActionPerformed

    private void fileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveAsActionPerformed
        saveAs();
    }//GEN-LAST:event_fileSaveAsActionPerformed

    private void fileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExitActionPerformed
        if (isExit() == false) {
            setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_fileExitActionPerformed

    private void editUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUndoActionPerformed
        undo();
    }//GEN-LAST:event_editUndoActionPerformed
    private String temp = "";
    private void editDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDelActionPerformed
        txtA.setText(txtA.getText().replace(txtA.getSelectedText(), ""));
    }//GEN-LAST:event_editDelActionPerformed

    private void editCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCopyActionPerformed
        temp = txtA.getSelectedText();
        if (temp == null) {
            return;
        }
        StringSelection stringSelection = new StringSelection(temp);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, stringSelection);
    }//GEN-LAST:event_editCopyActionPerformed

    private void editPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPasteActionPerformed
        try {
            temp = (String) Toolkit.getDefaultToolkit()
                    .getSystemClipboard().getData(DataFlavor.stringFlavor);
            if (temp == null) {
                return;
            }
            txtA.setText(txtA.getText() + temp);
        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editPasteActionPerformed

    private void editRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRedoActionPerformed
        redo();
    }//GEN-LAST:event_editRedoActionPerformed

    private void editCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCutActionPerformed
        temp = txtA.getSelectedText();

        if (temp == null) {
            return;
        }
        StringSelection stringSelection = new StringSelection(temp);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, stringSelection);
        txtA.replaceRange("", txtA.getSelectionStart(), txtA.getSelectionEnd());
    }//GEN-LAST:event_editCutActionPerformed

    private void editSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSelectAllActionPerformed
        txtA.selectAll();
    }//GEN-LAST:event_editSelectAllActionPerformed

    private void editReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editReplaceActionPerformed
        Replace re = new Replace(this, true);
        re.setLocationRelativeTo(null);
        re.setVisible(true);
    }//GEN-LAST:event_editReplaceActionPerformed

    private void editFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFindActionPerformed
        DialogFind find = new DialogFind(this, true);
        find.setLocationRelativeTo(null);
        find.setVisible(true);
    }//GEN-LAST:event_editFindActionPerformed

    private void editFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFontActionPerformed
//        FontProperty fp = new FontProperty(this, true);
        ChangeFontDialog cfd = new ChangeFontDialog(this, true);
        cfd.setLocationRelativeTo(null);
        cfd.setVisible(true);
    }//GEN-LAST:event_editFontActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (isExit() == false) {
            setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void txtAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAFocusLost
        dang();
    }//GEN-LAST:event_txtAFocusLost

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showOptionDialog(rootPane, "Created by Dang Tran Hai Dang",
                "About", JOptionPane.DEFAULT_OPTION, JOptionPane.DEFAULT_OPTION,
                null, null, null);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private final Stack<String> undoStack;
    private final Stack<String> redoStack;
    private String currentText;
    private String nextText;

    private void txtACaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtACaretUpdate
//        undoBtn.setEnabled(!undoStack.empty());
//        redoBtn.setEnabled(!redoStack.empty());
//        currentText = nextText;
//        nextText = txtA.getText();
//        if (undoStack.size() > 20) {
//            undoStack.removeElementAt(undoStack.indexOf(undoStack.lastElement()));
//        }
//        if (undoStack.empty()) {
//            undoStack.push(currentText);
//        }
//        if (!currentText.isEmpty() && !undoStack.peek().equals(currentText)) {
//            undoStack.push(currentText);
//        }
    }//GEN-LAST:event_txtACaretUpdate

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        dang();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MTE mte = new MTE();
                mte.setLocationRelativeTo(null);
                mte.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu edit;
    private javax.swing.JMenuItem editCopy;
    private javax.swing.JMenuItem editCut;
    private javax.swing.JMenuItem editDel;
    private javax.swing.JMenuItem editFind;
    private javax.swing.JMenuItem editFont;
    private javax.swing.JMenuItem editPaste;
    private javax.swing.JMenuItem editRedo;
    private javax.swing.JMenuItem editReplace;
    private javax.swing.JMenuItem editSelectAll;
    private javax.swing.JMenuItem editUndo;
    private javax.swing.JMenuItem fileExit;
    private javax.swing.JMenuItem fileNew;
    private javax.swing.JMenuItem fileOpen;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JMenuItem fileSaveAs;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    public javax.swing.JTextArea txtA;
    // End of variables declaration//GEN-END:variables
}
